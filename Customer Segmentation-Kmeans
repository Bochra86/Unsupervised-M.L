import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Sample customer data
data = {
    'CustomerID': [1, 2, 3, 4],
    'Age': [19, 21, 20, 23],
    'AnnualIncome': [15000, 18000, 25000, 23000],
    'SpendingScore': [39, 81, 6, 77]
}
df = pd.DataFrame(data)

# Selecting relevant features
X = df[['Age', 'AnnualIncome', 'SpendingScore']]

# Standardizing the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply K-Means with a predefined number of clusters (e.g., 3)
kmeans = KMeans(n_clusters=3, random_state=0)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# Check which cluster each customer belongs to
print(df)

# Elbow Method to find optimal k
inertia = []
for k in range(1, x_scaled.shape[0]+1):
    kmeans = KMeans(n_clusters=k, random_state=0)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, x_scaled.shape[0]+1), inertia, 'bo-')
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()
